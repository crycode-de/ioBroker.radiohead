{"version":3,"file":"main.js","sourceRoot":"/","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * RadioHead adapter for ioBroker\n *\n * Copyright (c) 2019-2020 Peter Müller <peter@crycode.de>\n */\n\nimport * as utils from '@iobroker/adapter-core';\n\nimport { autobind } from 'core-decorators';\n\nimport { RadioHeadSerial, RH_ReceivedMessage as ReceivedMessage } from 'radiohead-serial';\n\nimport { parseNumber, parseAddress, hexNumber, round, formatBufferAsHexString } from './lib/tools';\n\n// Augment the adapter.config object with the actual types\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace ioBroker {\n    interface AdapterConfig {\n      port: string;\n      baud: string;\n      address: string;\n      reliable: boolean;\n      retries: number;\n      timeout: number;\n      promiscuous: boolean;\n      logAllData: boolean;\n    }\n  }\n}\n\nconst infoCounters: ('receivedCount'|'retransmissionsCount'|'sentErrorCount'|'sentOkCount')[] = ['receivedCount', 'retransmissionsCount', 'sentErrorCount', 'sentOkCount'];\n\nclass RadioheadAdapter extends utils.Adapter {\n\n  /**\n   * Address of this instance in the RadioHead network.\n   */\n  private address: number = 0x00;\n\n  /**\n   * Instance of the used RadioHeadSerial class\n   * or `null` if not initialized.\n   */\n  private rhs: RadioHeadSerial | null = null;\n\n  /**\n   * Conuter for received RadioHead messages.\n   */\n  private receivedCount: number = 0;\n\n  /**\n   * Counter for retransmitted RadioHead messages.\n   */\n  private retransmissionsCount: number = 0;\n\n  /**\n   * Counter for falsy sent / not sent RadioHead messages.\n   */\n  private sentErrorCount: number = 0;\n\n  /**\n   * Counter for successfully sent RadioHead messages.\n   */\n  private sentOkCount: number = 0;\n\n  /**\n   * Internal storage for the retransmissions counter on instance start.\n   * Used to calculate the total retransmissions count.\n   */\n  private retransmissionsCountStart: number = 0;\n\n  /**\n   * Array of Objects for the incoming data matcher.\n   */\n  private incomingMatches: IncomingDataMatch[] = [];\n\n  /**\n   * Object containing a mapping of objectIDs and the data to send for\n   * outgoing data.\n   */\n  private outgoingMatches: Record<string, OutgoingDataMatch> = {};\n\n  /**\n   * Constructor to create a new instance of the adapter.\n   * @param options The adapter options.\n   */\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: 'radiohead',\n    });\n\n    this.on('ready', this.onReady);\n    this.on('objectChange', this.onObjectChange);\n    this.on('stateChange', this.onStateChange);\n    this.on('message', this.onMessage);\n    this.on('unload', this.onUnload);\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  @autobind\n  private async onReady(): Promise<void> {\n    // Reset the connection indicator during startup\n    this.setState('info.connection', false, true);\n\n    // Debug log the current config\n    this.log.debug('config: ' + JSON.stringify(this.config));\n\n    // Parse and check the address of the adapter in the RadioHead network\n    this.address = parseNumber(this.config.address);\n    if (isNaN(this.address) || this.address < 0 || this.address > 254) {\n      this.log.error(`Config error: Invalid address ${this.config.address} (${this.address})!`);\n      return;\n    }\n\n    // Load/initialize the info counters\n    for (const id of infoCounters) {\n      const state = await this.getStateAsync('info.' + id);\n      this.log.debug(`loaded ${this.namespace}.info.${id} ` + JSON.stringify(state));\n      if(state) {\n        this[id] = state.val as number;\n      } else {\n        await this.setStateAsync('info.' + id, 0, true);\n      }\n    }\n\n    // setup matcher for incoming data\n    this.getForeignObjects(this.namespace + '.data.in.*', 'state', (err, objects) => {\n      if (err) {\n        this.log.error('error loading incoming data objects');\n        return;\n      }\n\n      for (const objectId in objects) {\n        const obj: IncomingDataObject = objects[objectId] as IncomingDataObject;\n\n        const parts = obj.native.data.split(';');\n        parts.forEach((part, partIdx) => {\n          if (part.length === 0) {\n            this.log.warn(`empty data part #${partIdx} in object ${objectId} ignored`);\n            return;\n          }\n          const data = part.trim().split(',');\n          const dataMatch: IncomingDataMatch = {\n            from: parseAddress(obj.native.fromAddress),\n            to: this.config.promiscuous ? parseAddress(obj.native.toAddress) : null,\n            data: this.prepareDataForMatcher(data),\n            objectId: objectId,\n            role: obj.common.role,\n            type: obj.common.type || 'number',\n            numParts: parts.length,\n            matchedPart: partIdx,\n            bufferDataType: obj.native.dataType,\n            bufferDataStart: data.indexOf('D'),\n            factor: obj.native.factor,\n            offset: obj.native.offset,\n            decimals: obj.native.decimals\n          };\n          this.incomingMatches.push(dataMatch);\n        });\n      }\n\n      this.log.debug(`loaded ${this.incomingMatches.length} incoming matches`);\n    });\n\n    // setup mapping for outgoing data\n    this.getForeignObjects(this.namespace + '.data.out.*', 'state', (err, objects) => {\n      if (err) {\n        this.log.error('error loading outgoing data objects');\n        return;\n      }\n\n      for (const objectId in objects) {\n        const obj: OutgoingDataObject = objects[objectId] as OutgoingDataObject;\n        const parts = obj.native.data.split(';').map((p) => p.trim().split(','));\n\n        const data: DataArray[] = [];\n        parts.forEach((part) => {\n          data.push(this.prepareDataForMatcher(part));\n        });\n\n        this.outgoingMatches[objectId] = {\n          to: parseAddress(obj.native.toAddress) || 0,\n          data: data.map((d: any) => Buffer.from(d)),\n          role: obj.common.role,\n          type: obj.common.type || 'number',\n          bufferDataType: obj.native.dataType,\n          bufferDataStart: parts[0].indexOf('D')\n        }\n      }\n\n      this.log.debug(`loaded ${Object.keys(this.outgoingMatches).length} outgoing matches`);\n    });\n\n    // set the start value for retransmissions counter\n    this.retransmissionsCountStart = this.retransmissionsCount;\n\n    // Init the radiohead-serial and catch/log possible errors\n    try {\n      this.rhs = new RadioHeadSerial({\n        port: this.config.port,\n        baud: parseInt(this.config.baud, 10),\n        address: this.address,\n        reliable: this.config.reliable,\n        autoInit: false\n      });\n\n      this.rhs.on('error', this.onRhsError);\n      this.rhs.on('data', this.onRhsData);\n\n      // enable promiscuous mode if configured\n      if (this.config.promiscuous) {\n        this.rhs.setPromiscuous(true);\n        this.log.info('promiscuous mode enabled');\n      }\n\n      await this.rhs.init()\n        .then(() => {\n          this.log.info('manager initialized, my RadioHead address is ' + hexNumber(this.address));\n\n          // set the connection state to connected\n          this.setState('info.connection', true, true);\n        });\n\n    } catch (err) {\n      this.log.warn(`Error on serial port init: ` + err);\n      this.log.warn(`Adapter will not work...`);\n      return;\n    }\n\n    // subscribe needed states\n    this.subscribeStates('actions.*');\n    this.subscribeStates('data.out.*');\n  }\n\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  @autobind\n  private async onUnload(callback: () => void): Promise<void> {\n    try {\n      // close the serial port if rhs is initialized\n      if (this.rhs !== null) {\n        this.log.info('closing serial port...');\n        await this.rhs.close();\n        this.log.info('serial port closed');\n        this.rhs = null;\n      }\n      // reset connection state\n      this.setState('info.connection', false, true);\n      callback();\n    } catch (e) {\n      callback();\n    }\n  }\n\n  /**\n   * Handle RadioHeadSerial errors.\n   * @param error The error.\n   */\n  @autobind\n  private onRhsError (error: Error): void {\n    this.log.error('RadioHeadSerial Errro: ' + error);\n  }\n\n  /**\n   * Prepare some data to be used with the matcher for incoming data.\n   * @param  data Array of strings for the data to match including placeholders * and D.\n   * @return      DataArray to be used with the matcher.\n   */\n  private prepareDataForMatcher (data: string[]): DataArray {\n    const newData: DataArray = [];\n    data.forEach((val, idx) => {\n      if (val === '*' || val === 'D') {\n        newData[idx] = null;\n      } else {\n        newData[idx] = parseNumber(val);\n      }\n    });\n\n    return newData;\n  }\n\n  /**\n   * Handler for incoming RadioHead messages.\n   * @param msg The received RadioHead message.\n   */\n  @autobind\n  private onRhsData (msg: ReceivedMessage): void {\n    this.setStateAsync('info.receivedCount', ++this.receivedCount, true);\n    this.setStateAsync('info.lastReceived', new Date().toISOString(), true);\n\n    // log data if enabled\n    if (this.config.logAllData) {\n      this.log.info(`received <${formatBufferAsHexString(msg.data)}> from ${hexNumber(msg.headerFrom)} to ${hexNumber(msg.headerTo)} msgID ${hexNumber(msg.headerId)}`);\n    }\n\n    const data: DataArray = [...msg.data]; // convert buffer to array\n\n    // set the msg as incoming data, replacing the data buffer by the array\n    this.setStateAsync('data.incoming', { val: JSON.stringify({...msg, data}) }, true);\n\n    // check for matches\n    this.incomingMatches.forEach((dataMatch) => {\n\n      // filter addresses\n      if (msg.headerFrom !== dataMatch.from && dataMatch.from !== null) return;\n      if (msg.headerTo !== dataMatch.to && dataMatch.to !== null) return;\n\n      // check data\n      if (this.checkDataMatch(data, dataMatch.data)) {\n        // data matched!\n        this.log.debug(`received data ${JSON.stringify(msg)} matched ${JSON.stringify(dataMatch)}`);\n        this.handleMatchedMessage(msg, dataMatch);\n      }\n    });\n  }\n\n  /**\n   * Handler for matched RadioHead messages.\n   * @param  msg       The RadioHead message.\n   * @param  dataMatch The matched incoming data.\n   * @return           Promise which will be resolved when the corresponding state is updated.\n   */\n  @autobind\n  private async handleMatchedMessage (msg: ReceivedMessage, dataMatch: IncomingDataMatch): Promise<void> {\n    switch (dataMatch.role) {\n      case 'button':\n        // buttons are pushed only\n        await this.setForeignStateAsync(dataMatch.objectId, true, true);\n        break;\n\n      case 'indecator':\n      case 'switch':\n        // switch and indecator can be set true/false or toggled\n        if (dataMatch.numParts === 1) {\n          // only one part... toggle\n          const oldState = await this.getForeignStateAsync(dataMatch.objectId);\n          await this.setForeignStateAsync(dataMatch.objectId, !(oldState && oldState.val), true);\n        } else {\n          // two parts ... part 0 = true, part 1 = false\n          if (dataMatch.matchedPart == 0) {\n            await this.setForeignStateAsync(dataMatch.objectId, true, true);\n          } else {\n            await this.setForeignStateAsync(dataMatch.objectId, false, true);\n          }\n        }\n        break;\n\n      default:\n        // check if data start is defined\n        if (dataMatch.bufferDataStart < 0) return;\n\n        // get the value and set the state\n        let val: number|boolean;\n        if (dataMatch.type === 'boolean') {\n          val = this.getValueFromBuffer(msg.data, 'uint8', dataMatch.bufferDataStart, dataMatch.objectId);\n          val = !!val; // make is boolean\n        } else { // number\n          val = this.getValueFromBuffer(msg.data, dataMatch.bufferDataType, dataMatch.bufferDataStart, dataMatch.objectId);\n          val = val * dataMatch.factor + dataMatch.offset;\n          if (typeof dataMatch.decimals === 'number') {\n            val = round(val, dataMatch.decimals);\n          }\n        }\n        await this.setForeignStateAsync(dataMatch.objectId, val, true);\n    }\n  }\n\n  /**\n   * Helper method to check if some received data matches a predefined data.\n   * @param  data    The data to check.\n   * @param  matchTo The data to match.\n   * @return         true is the data matches.\n   */\n  private checkDataMatch (data: DataArray, matchTo: DataArray): boolean {\n    // check length\n    if (matchTo.length === 0) return false;\n    if (data.length < matchTo.length) return false;\n    // loop through the bytes\n    const l = matchTo.length;\n    for (let idx = 0; idx < l; idx++) {\n      // continue if the byte should be ignored (is null)\n      if (matchTo[idx] === null) continue;\n\n      // check if the byte matches\n      if (matchTo[idx] !== data[idx]) {\n        // byte doesn't match\n        return false;\n      }\n    }\n\n    // all bytes matched\n    return true;\n  }\n\n  /**\n   * Update the counter of retransmissions.\n   * @return Promise which will be resolved when the state is set.\n   */\n  private async updateRetransmissionsCount (): Promise<void> {\n    if (!this.rhs) return;\n\n    const newRetr = this.retransmissionsCountStart + this.rhs.getRetransmissions();\n    if (newRetr !== this.retransmissionsCount) {\n      this.retransmissionsCount = this.retransmissionsCountStart + this.rhs.getRetransmissions();\n      await this.setStateAsync('info.retransmissionsCount', this.retransmissionsCount, true);\n    }\n  }\n\n  /**\n   * Helper method to get some value from a buffer.\n   * @param  buf      The buffer to read from.\n   * @param  type     The type of the value in the buffer.\n   * @param  start    Start index in the buffer where the value starts.\n   * @param  objectId ID of the object for which the value should be read.\n   * @return          The read value or NaN in case of an error.\n   */\n  private getValueFromBuffer (buf: Buffer, type: BufferDataType, start: number, objectId: string): number {\n    try {\n      switch (type) {\n        case 'int8': return buf.readInt8(start);\n        case 'uint8': return buf.readUInt8(start);\n        case 'int16_le': return buf.readInt16LE(start);\n        case 'int16_be': return buf.readInt16BE(start);\n        case 'uint16_le': return buf.readUInt16LE(start);\n        case 'uint16_be': return buf.readUInt16BE(start);\n        case 'int32_le': return buf.readInt32LE(start);\n        case 'int32_be': return buf.readInt32BE(start);\n        case 'uint32_le': return buf.readUInt32LE(start);\n        case 'uint32_be': return buf.readUInt32BE(start);\n        case 'float32_le': return buf.readFloatLE(start);\n        case 'float32_be': return buf.readFloatBE(start);\n        case 'double64_le': return buf.readDoubleLE(start);\n        case 'double64_be': return buf.readDoubleBE(start);\n        default:\n          this.log.warn(`${objectId} config error! Invalid data type ${type}`);\n      }\n    } catch (err) {\n      this.log.warn(`${objectId} config error! Maybe there are too few byte in the buffer to read a ${type}? ` + err);\n    }\n    return NaN;\n  }\n\n  /**\n   * Helper method to write some value into a buffer.\n   * @param  val      The value to write.\n   * @param  buf      The buffer to write into.\n   * @param  type     The type of the value in the buffer.\n   * @param  start    Start index in the buffer where the value starts.\n   * @param  objectId ID of the object for which the value should be written.\n   * @return          true if the value is written successfully or false in case of an error.\n   */\n  private writeValueToBuffer (val: number, buf: Buffer, type: BufferDataType, start: number, objectId: string): boolean {\n    try {\n      switch (type) {\n        case 'int8': buf.writeInt8(val, start); break;\n        case 'uint8': buf.writeUInt8(val, start); break;\n        case 'int16_le': buf.writeInt16LE(val, start); break;\n        case 'int16_be': buf.writeInt16BE(val, start); break;\n        case 'uint16_le': buf.writeUInt16LE(val, start); break;\n        case 'uint16_be': buf.writeUInt16BE(val, start); break;\n        case 'int32_le': buf.writeInt32LE(val, start); break;\n        case 'int32_be': buf.writeInt32BE(val, start); break;\n        case 'uint32_le': buf.writeUInt32LE(val, start); break;\n        case 'uint32_be': buf.writeUInt32BE(val, start); break;\n        case 'float32_le': buf.writeFloatLE(val, start); break;\n        case 'float32_be': buf.writeFloatBE(val, start); break;\n        case 'double64_le': buf.writeDoubleLE(val, start); break;\n        case 'double64_be': buf.writeDoubleBE(val, start); break;\n        default:\n          this.log.warn(`${objectId} config error! Invalid data type ${type}`);\n          return false;\n      }\n    } catch (err) {\n      this.log.warn(`${objectId} config error! Maybe there are too few byte in the buffer to write a ${type}? ` + err);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Is called if a subscribed object changes.\n   * @param id  The ID of the object.\n   * @param obj The ioBroker object.\n   */\n  @autobind\n  private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    if (obj) {\n      // The object was changed\n      this.log.debug(`object ${id} changed: ${JSON.stringify(obj)}`);\n    } else {\n      // The object was deleted\n      this.log.debug(`object ${id} deleted`);\n    }\n  }\n\n  /**\n   * Is called if a subscribed state changes.\n   * @param id    The ID of the state.\n   * @param state The ioBroker state.\n   */\n  @autobind\n  private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n    if (state) {\n      // The state was changed\n      this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack}) ` + JSON.stringify(state));\n\n      // don't do anything if ack is set\n      // we aren't able to send something if rhs is not initialized\n      if (state.ack === true || !this.rhs) return;\n\n      // handle special states\n      switch (id) {\n        case this.namespace + '.actions.resetCounters':\n          this.log.info('reset information counters');\n\n          this.retransmissionsCountStart = 0;\n          this.rhs.resetRetransmissions();\n\n          for (const id of infoCounters) {\n            this[id] = 0;\n            await this.setStateAsync('info.' + id, 0, true);\n          }\n\n          await this.setStateAsync(id, state, true);\n          return;\n      }\n\n      // is this some outgoing data?\n      if (this.outgoingMatches.hasOwnProperty(id)) {\n        // prepare the data for sending\n        let buf: Buffer | null = null;\n        switch (this.outgoingMatches[id].role) {\n          case 'switch':\n          case 'indecator':\n            // switch or indecator uses the second data group for false value if provied\n            if (this.outgoingMatches[id].data.length > 1 && !state.val) {\n              // send false\n              buf = Buffer.from(this.outgoingMatches[id].data[1]) // copy the configured buffer to prevent issues\n              break;\n            }\n\n          default:\n            buf = Buffer.from(this.outgoingMatches[id].data[0]) // copy the configured buffer to prevent issues\n        }\n\n        // if there is a data start defined ...\n        if (this.outgoingMatches[id].bufferDataStart >= 0) {\n          if (this.outgoingMatches[id].type === 'boolean') {\n            // boolean type values is always 0x01 (true) or 0x00 (false)\n            buf[this.outgoingMatches[id].bufferDataStart] = (state.val) ? 0x01 : 0x00;\n          } else {\n            // write the value into the buffer\n            if (!this.writeValueToBuffer(state.val as number, buf, this.outgoingMatches[id].bufferDataType, this.outgoingMatches[id].bufferDataStart, id)) {\n              return;\n            }\n          }\n        }\n\n        // send the data\n        await this.rhsSend(this.outgoingMatches[id].to, buf, id, state);\n      }\n    } else {\n      // The state was deleted\n      this.log.debug(`state ${id} deleted`);\n    }\n  }\n\n  /**\n   * Method to send some data using RadioHead.\n   * @param  to              Address of the receiver.\n   * @param  buf             The data to send as a buffer.\n   * @param  sendingObjectId ID of the ioBroker object which triggered the sending.\n   * @param  stateAck        ioBroker state so set the ack on when sent successfully.\n   * @return                 A Promise which will be resolved when done. If there was an error the first argument will be the error.\n   */\n  @autobind\n  private async rhsSend (to: number, buf: Buffer, sendingObjectId: string, stateAck?: ioBroker.State): Promise<Error | undefined> {\n    if (!this.rhs || !this.rhs.isInitDone()) {\n      this.log.warn(`unable to send new value of '${sendingObjectId}' because we are not ready to send`);\n      return Promise.resolve(new Error('Unable to send, not ready'));\n    }\n\n    if (this.config.logAllData) {\n      this.log.info(`sending <${formatBufferAsHexString(buf)}> to ${hexNumber(to)}`);\n    }\n\n    let err: Error | undefined = undefined;\n    await this.rhs.send(to, buf)\n      .then(() => {\n        // update ok info\n        this.setStateAsync('info.sentOkCount', ++this.sentOkCount, true);\n        this.setStateAsync('info.lastSentOk', new Date().toISOString(), true);\n\n        // set the ack flag\n        if (stateAck) {\n          this.setStateAsync(sendingObjectId, stateAck, true);\n        }\n      })\n      .catch((e) => {\n        // update error info\n        this.setStateAsync('info.sentErrorCount', ++this.sentErrorCount, true);\n        this.setStateAsync('info.lastSentError', new Date().toISOString(), true);\n        this.log.warn(`error sending message for ${sendingObjectId} to ${hexNumber(to)} - ${e}`);\n        err = e;\n      })\n      // in any case update the retransmissions counter\n      .then(() => this.updateRetransmissionsCount());\n\n    return err;\n  }\n\n  /**\n   * Some message was sent to this instance over message box (e.g. by a script).\n   * @param obj The received ioBroker message.\n   */\n  @autobind\n  private onMessage(obj: ioBroker.Message): void {\n    this.log.debug('got message ' + JSON.stringify(obj));\n\n    if (typeof obj === 'object' && obj.message) {\n      if (obj.command === 'send') {\n        // we should send some message...\n        if (typeof obj.message !== 'object') {\n          this.log.warn(`invalid send message from ${obj.from} received ` + JSON.stringify(obj.message));\n          return;\n        }\n\n        const payload: MessagePayloadSend = obj.message as MessagePayloadSend;\n        const to = parseAddress(payload.to);\n\n        let buf: Buffer | null;\n        try {\n          buf = Buffer.from(payload.data as []);\n        } catch (e) {\n          buf = null;\n        }\n\n        if (to === null || buf === null || buf.length === 0) {\n          this.log.warn(`invalid send message from ${obj.from} received ` + JSON.stringify(obj.message));\n          return;\n        }\n\n        this.rhsSend(to, buf, obj.from)\n          .then((error) => {\n            // Send response in callback if required\n            if (obj.callback) {\n              this.sendTo(obj.from, obj.command, {error: error}, obj.callback);\n            }\n          });\n      }\n    }\n  }\n\n}\n\nif (module.parent) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new RadioheadAdapter(options);\n} else {\n  // otherwise start the instance directly\n  (() => new RadioheadAdapter())();\n}\n"]}