{"version":3,"file":"tools.js","sourceRoot":"/","sources":["lib/tools.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,SAAgB,WAAW,CAAE,GAAW;IACtC,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;QACxB,OAAO,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;KAC1B;SAAM;QACL,OAAO,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;KAC1B;AACH,CAAC;AAND,kCAMC;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAE,IAAqB;IACjD,IAAI,OAAO,IAAI,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC;IAC1C,IAAI,IAAI,KAAK,GAAG;QAAE,OAAO,IAAI,CAAC;IAC9B,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAJD,oCAIC;AAED;;;;GAIG;AACH,SAAgB,SAAS,CAAE,GAAW;IACpC,IAAI,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IACvC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QAChB,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;KACb;IACD,OAAO,IAAI,GAAG,CAAC,CAAC;AAClB,CAAC;AAND,8BAMC;AAED;;;;;GAKG;AACH,SAAgB,KAAK,CAAE,GAAW,EAAE,SAAiB;IACnD,IAAG,SAAS,IAAI,CAAC;QAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE1C,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;QAC/B,GAAG,IAAI,EAAE,CAAC;KACX;IAED,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACrC,CAAC;AATD,sBASC;AAED;;;;GAIG;AACH,SAAgB,uBAAuB,CAAE,GAAW;IAClD,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;AAC5E,CAAC;AAFD,0DAEC","sourcesContent":["/**\n * Parse a hex or decimal number string.\n * @param num The number as a string (e.g. 0x42 or 127)\n * @return    The parsed number\n */\nexport function parseNumber (num: string): number {\n  if (num.startsWith('0x')) {\n    return parseInt(num, 16);\n  } else {\n    return parseInt(num, 10);\n  }\n}\n\n/**\n * Parse an address to a string.\n * @param addr The address as a hex or decimal number string or `*`.\n * @return     The address as a number or null if `addr` was `*`.\n */\nexport function parseAddress (addr: number | string): number | null {\n  if (typeof addr === 'number') return addr;\n  if (addr === '*') return null;\n  return parseNumber(addr);\n}\n\n/**\n * Format a number as a hex number string.\n * @param num The number.\n * @retrun    The hex number with leading `0x`.\n */\nexport function hexNumber (num: number): string {\n  let s = num.toString(16).toUpperCase();\n  if (s.length < 2) {\n    s = '0' + s;\n  }\n  return '0x' + s;\n}\n\n/**\n * Round a floating point number to the given precision.\n * @param num       The number.\n * @param precision The number of decimals to round to.\n * @return          The rounded number.\n */\nexport function round (num: number, precision: number): number {\n  if(precision == 0) return Math.round(num);\n\n  let exp = 1;\n  for(let i=0; i < precision; i++) {\n    exp *= 10;\n  }\n\n  return Math.round(num * exp) / exp;\n}\n\n/**\n * Format a buffer as a hex string.\n * @param buf The buffer to format.\n * @return    A string with the buffer content as hex numbers separated by spaces.\n */\nexport function formatBufferAsHexString (buf: Buffer): string {\n  return buf.toString('hex').toUpperCase().replace(/(..)/g, ' 0x$1').trim();\n}\n"]}